# helm-charts/product-service/values.yaml
replicaCount: 1

image:
  repository: prasad890/store-product-service
  tag: "latest"
  pullPolicy: IfNotPresent

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: "product-service"

service:
  name: product-service
  type: ClusterIP
  port: 3002
  targetPort: 3002

# Argo Rollouts Strategy - Same as product-service
strategy:
  type: canary
  canary:
    steps:
      - setWeight: 20
      - pause:
          duration: 5m
      - analysis:
          templates:
            - templateName: product-service-analysis
      - setWeight: 40
      - pause:
          duration: 5m
      - analysis:
          templates:
            - templateName: product-service-analysis
      - setWeight: 60
      - pause:
          duration: 5m
      - analysis:
          templates:
            - templateName: product-service-analysis
      - setWeight: 80
      - pause:
          duration: 5m
      - analysis:
          templates:
            - templateName: product-service-analysis
      - setWeight: 100
    trafficRouting:
      istio:
        virtualService:
          name: product-service
          routes:
            - primary
    analysisInterval: 1m
    analysisSuccessCount: 5
    analysisFailureLimit: 3

# Istio Configuration
istio:
  enabled: true
  gateway:
    enabled: false
  virtualService:
    enabled: true
    hosts:
      - product-service
  destinationRule:
    enabled: true

# HPA Configuration
autoscaling:
  enabled: true
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 50
          periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
        - type: Percent
          value: 100
          periodSeconds: 30

# Resource limits
resources:
  requests:
    cpu: 1m
    memory: 50Mi
  limits:
    cpu: 100m
    memory: 256Mi

# Probes
probes:
  startup:
    httpGet:
      path: /health
      port: 3000
    initialDelaySeconds: 20
    failureThreshold: 5
    periodSeconds: 10
  readiness:
    httpGet:
      path: /health
      port: 3000
    initialDelaySeconds: 3
    failureThreshold: 3
    periodSeconds: 5
  liveness:
    httpGet:
      path: /health
      port: 3000
    initialDelaySeconds: 3
    failureThreshold: 5
    periodSeconds: 3

# Environment variables
env:
  - name: AI_SERVICE_URL
    value: "http://ai-service:5001/"


# Vault Configuration - DISABLED for product-service
vault:
  enabled: false

# Datadog Configuration
datadog:
  enabled: true
  env: production
  service: product-service
  version: "{{ .Values.image.tag }}"
  logs:
    enabled: true
  apm:
    enabled: true
    language: nodejs  # Node.js auto-instrumentation
  profiling:
    enabled: false

# Prometheus Metrics
metrics:
  enabled: false
  serviceMonitor:
    enabled: false
    interval: 30s
    path: /metrics

# Node selector
nodeSelector:
  kubernetes.io/os: linux

tolerations: []
affinity: {}
podAnnotations: {}
podLabels: {}

# Analysis Template Configuration
analysis:
  enabled: true
  provider: datadog
  datadog:
    apiKeySecret:
      name: datadog-secret
      key: api-key
    appKeySecret:
      name: datadog-secret
      key: app-key
    metrics:
      - name: error-rate
        query: "avg:trace.http.request.errors{service:product-service,env:production}.as_rate()"
        successCondition: "result < 0.05"
        failureLimit: 3
        interval: 1m
        count: 5
      - name: p95-latency
        query: "avg:trace.http.request.duration.by.service.95p{service:product-service,env:production}"
        successCondition: "result < 1000"
        failureLimit: 3
        interval: 1m
        count: 5
        
initContainers: []        