# helm-charts/store-admin/values.yaml
replicaCount: 1

image:
  repository: 614520203046.dkr.ecr.us-east-1.amazonaws.com/store-admin
  tag: "1.0.3-293ad83"
  pullPolicy: IfNotPresent

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: "store-admin"

service:
  name: store-admin
  type: ClusterIP
  port: 80
  targetPort: 8081

# ALB Ingress Configuration - For external traffic
ingress:
  enabled: true
  annotations:
    # Additional custom annotations if needed
    alb.ingress.kubernetes.io/tags: Environment=production,Team=platform
  hosts:
    - host: "admin.devopsproduction.com"  # Leave empty for ALB-generated DNS, or add custom domain
      paths:
        - path: /
          pathType: Prefix

  tls:
    - secretName: store-admin-tls
      hosts:
        - admin.devopsproduction.com
  alb:
    scheme: internet-facing
    targetType: ip
    certificateArn: arn:aws:acm:us-east-1:614520203046:certificate/1701a5c8-591c-4f5d-a3d1-d8773c15dc31

# Argo Rollouts Strategy - BLUE-GREEN
strategy:
  type: blueGreen
  blueGreen:
    activeService: store-admin
    previewService: store-admin-preview
    autoPromotionEnabled: true
    autoPromotionSeconds: 300
    scaleDownDelaySeconds: 300
    prePromotionAnalysis:
      templates:
        - templateName: store-admin-analysis
    postPromotionAnalysis:
      templates:
        - templateName: store-admin-analysis

# Istio Configuration - For service mesh & observability
istio:
  enabled: true  # ✅ ENABLED for service mesh
  gateway:
    enabled: false  # ❌ DISABLED - Using ALB for external traffic
    name: store-gateway
    hosts:
      - "*"
  virtualService:
    enabled: true  # ✅ ENABLED for internal routing & telemetry
    hosts:
      - store-admin
      - store-admin.application.svc.cluster.local
  destinationRule:
    enabled: true  # ✅ ENABLED for circuit breaking & load balancing

# HPA Configuration - Fast Scaling
autoscaling:
  enabled: true
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 60
      policies:
        - type: Percent
          value: 100
          periodSeconds: 15
        - type: Pods
          value: 2
          periodSeconds: 15
      selectPolicy: Max
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
        - type: Percent
          value: 100
          periodSeconds: 15
        - type: Pods
          value: 1
          periodSeconds: 15
      selectPolicy: Max

# Resource limits
resources:
  requests:
    cpu: 100m
    memory: 128Mi
  limits:
    cpu: 200m
    memory: 256Mi


# Probes
probes:
  startup:
    httpGet:
      path: /health
      port: 8081
    initialDelaySeconds: 5
    failureThreshold: 3
    periodSeconds: 5
  readiness:
    httpGet:
      path: /health
      port: 8081
    initialDelaySeconds: 3
    failureThreshold: 3
    periodSeconds: 5
  liveness:
    httpGet:
      path: /health
      port: 8081
    initialDelaySeconds: 3
    failureThreshold: 5
    periodSeconds: 3

# Environment variables
env:
  - name: VUE_APP_PRODUCT_SERVICE_URL
    value: "http://product-service.application.svc.cluster.local:3002/"
  - name: VUE_APP_MAKELINE_SERVICE_URL
    value: "http://makeline-service.application.svc.cluster.local:3001/"

# Init containers
initContainers:
  - name: wait-for-product-service
    image: busybox:1.36
    command: 
      - 'sh'
      - '-c'
      - 'until nc -zv product-service.application.svc.cluster.local 3002; do echo waiting for product-service; sleep 2; done;'
    resources:
      requests:
        cpu: 1m
        memory: 50Mi
      limits:
        cpu: 100m
        memory: 256Mi
  - name: wait-for-makeline-service
    image: busybox:1.36
    command: 
      - 'sh'
      - '-c'
      - 'until nc -zv makeline-service.application.svc.cluster.local 3001; do echo waiting for makeline-service; sleep 2; done;'
    resources:
      requests:
        cpu: 1m
        memory: 50Mi
      limits:
        cpu: 100m
        memory: 256Mi

# Vault Configuration
vault:
  enabled: false

# Datadog Configuration
datadog:
  enabled: true
  env: production
  service: store-admin
  logs:
    enabled: true
  apm:
    enabled: false  # Use RUM for frontend
  profiling:
    enabled: false

# Prometheus Metrics
metrics:
  enabled: false
  serviceMonitor:
    enabled: false

# Node selector
nodeSelector:
  kubernetes.io/os: linux

tolerations: []
affinity: {}
podAnnotations: {}
podLabels: {}

# Analysis Template Configuration - SIMPLE & WORKING
analysis:
  enabled: true
  provider: datadog
  datadog:
    secretName: datadog-secret
    metrics:
      - name: error-rate
        query: "avg:trace.http.request.errors{service:store-admin,env:production}.as_rate()"
        successCondition: "default(result, 0) < 0.05"  # Less than 5% error rate
        failureLimit: 3
        interval: 1m
        count: 5
      
      - name: p95-latency
        query: "avg:trace.http.request.duration.by.service.95p{service:store-admin,env:production}"
        successCondition: "default(result, 0) < 2000"  # Less than 2s latency
        failureLimit: 3
        interval: 1m
        count: 5
      
      - name: request-count
        query: "sum:trace.http.request.hits{service:store-admin,env:production}.as_count()"
        successCondition: "default(result, 0) > 0"  # At least some traffic
        failureLimit: 3
        interval: 1m
        count: 5